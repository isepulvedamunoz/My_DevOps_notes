Some commands

- docker run hello-world
- docker run --name hello-world hello-platzi
- docker ps -a
- docker -it ubuntu (enter container, and use the ubuntu shell)
- docker exec -it xxxxx bash
- docker run -d --name xxxx nginx (run in background)
- docker rm -f xxxx
- docker run -d --name xxxxx -p 8080:80 nginx (expose port 8080)
- docker logs xxxxx
- docker logs -f xxxxx



BIND MOUNTS

- docker run -d --name db mongo
- docker run -d --name db -v <path de mi maquina>:<path dentro del contenedor(/data/db mongo)

VOLUMENES

- docker volume ls
- docker volume create dbdata
- docker run -d --name db --mount src=dbdata,dst=/data/db mongo



COPY FILES FROM in and OUT OF container

    $ touch prueba.txt (creo un archivo en mi máquina)
    $ docker run -d --name copytest ubuntu tail -f /dev/null (corron un ubuntu y le agrego el tail para que quede activo)
    $ docker exec -it copytest bash (entro al contenedor)
    $ mkdir testing (creo un directorio en el contenedor)
    $ docker cp prueba.txt copytest:/testing/test.txt (copio el archivo dentro del contenedor)
    $ docker cp copytest:/testing localtesting (copio el directorio de un contenedor a mi máquina)
    con “docker cp” no hace falta que el contenedor esté corriendo


IMAGES IN DOCKER 

    - docker image ls 
    - docker pull ubuntu:20.04
    $ mkdir imagenes (creo un directorio en mi máquina)
    $ cd imagenes (entro al directorio)
    $ touch Dockerfile (creo un Dockerfile)
    $ code . (abro code en el direcotrio en el que estoy)

##Contenido del Dockerfile##
FROM ubuntu:latest
RUN touch /ust/src/hola-platzi.txt (comando a ejecutar en tiempo de build)
##fin##

    $ docker build -t ubuntu:platzi . (creo una imagen con el contexto de build <directorio>)
    $ docker run -it ubuntu:platzi (corro el contenedor con la nueva imagen)
    $ docker login (me logueo en docker hub)
    $ docker tag ubuntu:platzi miusuario/ubuntu:platzy (cambio el tag para poder subirla a mi docker hub)
    $ docker push miusuario/ubuntu:platzi (publico la imagen a mi docker hub)


DOCKER NETWORKING 

    $ docker network ls (listo las redes)
    $ docker network create --atachable plazinet (creo la red)
    $ docker inspect plazinet (veo toda la definición de la red creada)
    $ docker run -d --name db mongo (creo el contenedor de la BBDD)
    $ docker network connect plazinet db (conecto el contenedor “db” a la red “platzinet”)
    $ docker run -d -name app -p 3000:3000 --env MONGO_URL=mondodb://db:27017/test platzi (corro el contenedor “app” y le paso una variable)
    $ docker network connect plazinet app (conecto el contenedor “app” a la red “plazinet”)


Comandos:
    $ docker ps -a (veo todos los contenedores de mi máquina)
    $ docker container prune (borra todos los contenedores inactivos)
    $ docker rm -f $(docker ps -aq) (borra todos los contenedores que estén corriendo o apagados)
    $ docker network ls (lista todas las redes)
    $ docker volume ls (lista todos los volumes)
    $ docker image ls (lista todas las imágenes)
    $ docker system prune (borra todo lo que no se esté usando)
    $ docker run -d --name app --memory 1g platziapp (limito el uso de memoria)
    $ docker stats (veo cuantos recursos consume docker en mi sistema)
    $ docker inspect app (puedo ver si el proceso muere por falta de recursos)


Exponer puertos

Comandos:

    $ docker run -d --name proxy nginx (corro un nginx)
    $ docker stop proxy (apaga el contenedor)
    $ docker rm proxy (borro el contenedor)
    $ docker rm -f <contenedor> (lo para y lo borra)
    $ docker run -d --name proxy -p 8080:80 nginx (corro un nginx y expongo el puerto 80 del contenedor en el puerto 8080 de mi máquina)
    localhost:8080 (desde mi navegador compruebo que funcione)
    $ docker logs proxy (veo los logs)
    $ docker logs -f proxy (hago un follow del log)
    $ docker logs --tail 10 -f proxy (veo y sigo solo las 10 últimas entradas del log)


Bind mounts

    Los contenedores son autocontenidos y no pueden acceder a la información de la máquina que los hostea.
    A veces tenemos aplicaciones que generan datos y que queremos acceder a ellos.
    Crearemos una carpeta nueva para que interactúe con nuestro contenedor

        $ mkdir dockerdata

    Vamos a crear una base de datos en mongo db y hacer que los datos no mueran con el contenedor cuando se cierre

        $ docker run -d --name db mongo

    Ahora entraremos al contenedor para generar datos en él:

         docker exec -it db bash

    Ahora estoy dentro del contenedor y accederé a mongo:

        $ mongo

    ya estoy conectado en la base de datos local y crearé una base de dato llamada “Platzi”

        use platzi

    crearé un nuevo usuario llamado “guido”

        db.users.insert({“nombre”:“guido”})

    verifico que esté creado:

        db.users.find()

    Saldré de mongo y del contenedor con el comando exit dos veces

    y eliminaré el contenedor por completo con docker rm -f db

    Pero al volver de acceder no estará disponible, dado que eliminé el contenedor.

    Para que no se elimine el dato, necesito generar un directorio espejo en mi máquina local, 
    para esto, utilizaremos bind mounts.

    Lo primero que necesitamos es crear un nuevo directorio

        mkdir mongodata

    y obtendremos el path en el que está montado:

        pwd

    Y copiaremos en el portapapeles la ruta del directorio:

        docker run -d --name db -v /miruta/mongodata:/data/db mongo
        donde /miruta/mongodata es la ruta a mi carpeta local y /data/db es la carpeta donde mongo guarda sus datos

    ahora, si repetimos todo el procedimiento anterior, todo quedará espejado en el directorio local, por lo tanto, el dato que 
    ingresamos en la base de datos están disponibles en mongo si volvemos a




Comandos:

    $ mkdir dockerdata (creo un directorio en mi máquina)
    $ docker run -d --name db mongo
    $ docker ps (veo los contenedores activos)
    $ docker exec -it db bash (entro al bash del contenedor)
    $ mongo (me conecto a la BBDD)


Docker compose

    Docker Compose es una herramienta que permite simplificar el uso de Docker. A partir de archivos YAML 
    es mas sencillo crear contendores, conectarlos, habilitar puertos, volumenes, etc.

    Con Compose puedes crear diferentes contenedores y al mismo tiempo, en cada contenedor, diferentes servicios, 
    unirlos a un volúmen común, iniciarlos y apagarlos, etc. Es un componente fundamental para poder construir aplicaciones y microservicios.

    Docker Compose te permite mediante archivos YAML, poder instruir al Docker Engine a realizar tareas, programáticamente. 
    Y esta es la clave, la facilidad para dar una serie de instrucciones, y luego repetirlas en diferentes ambientes.

    $ docker-compose build (crea las imágenes)
    $ docker-compose up -d (crea los servicios/contenedores)
    $ docker-compose logs app (veo los logs de “app”)
    $ docker-compose logs -f app (hago un follow de los logs de “app”)


    Comandos docker-compose:
    $ docker network ls (listo las redes)
    $ docker network inspect docker_default (veo la definición de la red)
    $ docker-compose logs (veo todos los logs)
    $ docker-compose logs app (solo veo el log de “app”)
    $ docker-compose logs -f app (hago un follow del log de app)
    $ docker-compose exec app bash (entro al shell del contenedor app)
    $ docker-compose ps (veo los contenedores generados por docker compose)
    $ docker-compose down (borro todo lo generado por docker compose)


Docker compose override

    Docker compose override, sirve para realizar cambios en local, sin afectar al compose original.

    docker-compose.override.yml es un archivo que se encarga de sobreescribir tu configuración de docker-compose.yml , se puede usar 
    para tener segura tu configuración y para no guardar los cambios en el repositorio de git.
    Un equivalente podría ser los archivos de declaración de variables de entorno, donde hay un archivo .env declarando su nombre y valor, 
    y hay una copia .env.example con solo las variables sin valor. En .gitignore se declara que los cambios en .env no serán guardados, 
    pero mandamos el archivo de ejemplo al repositorio.

    Comandos:
    $ touch docker-compose.override.yml (creo el archivo override)
    $ docker-compose up -d (crea los servicios/contenedores)
    $ docker-compose exec app bash (entro al bash del contenedor app)
    $ docker-compose ps (veo los contenedores del compose)
    $ docker-compose up -d --scale app=2 (escalo dos instancias de app, previamente tengo que definir un rango de puertos en el archivo compose)
    $ docker-compose down (borro todo lo creado con compose)




Exec vs SHELL

    La diferencia es que SHELL FORM lo ejecuta como un comando hijo del shell, EXEC FORM lo ejecuta directamente.

    Ejecutar en modo Shell, es haciendolo como un comando directo, hijo de bash. Dde manera EXCEc es correrlo directamente, 
    sin pasar por el proceso de shell. Ademas se debe declarar mediante un formato EXEC para que docker lo reconozca.
    

    Comandos:
    $ docker build -t loop . (construyo la imagen)
    $ docker run -d --name looper loop (corro el contenedor)
    $ docker stop looper (le envía la señal SIGTERM al contenedor)
    $ docker ps -l (muestra el ps del último proceso)
    $ docker kill looper (le envía la señal SIGKILL al contenedor)
    $ docker exec looper ps -ef (veo los procesos del contenedor)


ENTRY POINT VS CMD

    El ENTRYPOINT es el comando que se ejcuta por defecto en Docker, y lo ejecuta si o si, y utiliza lo que diga comand (CMD) como parametro.

    si especificamos otra cosa al correr la imagen con docker run, se mantiene lo que diga ENTRYPOINT, pero sobreescribe al CMD.
    Ej:    

    ENTRYPOINT ["/bin/ping", "-c", "3"]  (instruccion ej. para hacer 3 veces ping)
    CMD ["localhost"]  (en este caso, es a donde se va a realizar el ping)

    $ docker build -t ping . (construyo la imagen)
    $ docker run --name pinger ping google.cl (ahora le puedo pasar un parámetro, previamente tengo que agregar el ENTRYPOINT en el Dockerfile)

        - Si no especifico google.cl, se va a ejecutar el localhost de CMD




Multi-stage build

    El Dockerfile de producción contiene 2 “fases de build” que se pueden pensar como hacer 2 build seguidos, en donde al final la imagen 
    construida contendrá lo especificado en el ultimo de los build.

    El primer build corre 1 test que verifica que todo funcione bien
    El segundo build construye la imagen final aprovechando el caché de las capas del primer build.

    Al final el 2do build es solo una extracción de lo que nos interza del primer build.

    Lo importante en este caso especifico es que si el test falla, entonces el build 2 no se corre, lo que significa que la imagen no se construye.


Docker in docker

    Si queremos tener docker dentro de un contenedor, mas llamado docker-in-docker. Compartiendo el socket de nuestro local a nuestro contenedor que tendra docker.

    docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker:19.03.12 
    # docker ps
    # docker run -d --name app prodapp






